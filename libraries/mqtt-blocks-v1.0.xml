<blocks app="Snap! 5.0, http://snap.berkeley.edu" version="1"><block-definition s="Load MQTT $flag" type="command" category="sensing"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return window.mqtt !== undefined</l></block><list></list></block><script><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doDeclareVariables"><list><l>test</l></list></block><block s="doSetVar"><l>test</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var mqttScript,&#xD;    done = false;&#xD;mqttScript = document.createElement(&apos;script&apos;),&#xD;mqttScript.onload = function () {&#xD;    done = true;&#xD;    console.log(&apos;MQTT is ready&apos;);&#xD;};&#xD;document.head.appendChild(mqttScript);&#xD;mqttScript.src = &apos;https://unpkg.com/mqtt/dist/mqtt.min.js&apos;;&#xD;return function () {return done; }</l></block><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block var="test"/><list></list></block></block></script></block-definition><block-definition s="MQTT new client for broker %&apos;url&apos; with options %&apos;opt&apos;" type="reporter" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">broker<options>moquitto (ws)=ws://test.mosquitto.org:8080/mqtt&#xD;mosca (ws)=ws://test.mosca.io/&#xD;hivemq (ws)=ws://broker.hivemq.com:8000&#xD;mosca-localhost (ws)=ws://localhost:3000&#xD;codimeo MQTT ={&#xD;  ws=ws://mqtt.codimeo.com:15675/ws&#xD;  wss=wss://mqtt.codimeo.com:15676/ws&#xD;}</options></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>client</l><l>broker</l><l>options</l></list><comment w="90" collapsed="false">Class attributes</comment></block><block s="doSetVar"><l>broker</l><block var="url"/></block><block s="doSetVar"><l>client</l><l>null</l></block><block s="doSetVar"><l>options</l><block var="opt"/></block><block s="doDeclareVariables"><list><l>connect</l><l>onevent</l><l>subscribe</l><l>unsubscribe</l><l>publish</l><l>is_connected</l><l>log_client</l><l>log_parent_sprite</l><l>end</l></list><comment w="90" collapsed="false">Class methods</comment></block><block s="doSetVar"><l>connect</l><block s="reifyScript"><script><block s="doIfElse"><block s="reportEquals"><block var="client"/><l>null</l></block><script><block s="doSetVar"><l>client</l><block s="evaluate"><block s="reportJSFunction"><list><l>broker</l><l>client</l><l>options</l></list><l>console.log("Client is null")&#xD;console.log("Options : ")&#xD;console.log(JSON.stringify(options))&#xD;&#xD;if(!world.mqttClients) {&#xD;  world.mqttClients = []&#xD;}&#xD;&#xD;for(var i=0; i &lt; world.mqttClients.length; i++) {&#xD;  //First, ensure that all mqtt Clients are ended.&#xD;  //Otherwise, opended websocket will continue pinging&#xD;  world.mqttClients[i].end()&#xD;}&#xD;&#xD;// Then purge the clients&apos; list&#xD;world.mqttClients.splice(0)&#xD;&#xD;client = mqtt.connect(broker, options)&#xD;console.log("Created new client")&#xD;console.log(client.options.clientId)&#xD;&#xD;client.parent = this&#xD;options = client.options&#xD;&#xD;world.mqttClients.push(client)&#xD;return client</l></block><list><block var="broker"/><block var="client"/><block var="options"/></list></block></block></script><script><block s="doSetVar"><l>client</l><block s="evaluate"><block s="reportJSFunction"><list><l>broker</l><l>client</l><l>options</l></list><l>if(client.connected) {&#xD;  console.log("Client is connected yet")&#xD;  return&#xD;}&#xD;client = mqtt.connect(broker, options)&#xD;console.log("Created new client")&#xD;console.log(client.options.clientId)&#xD;return client</l></block><list><block var="broker"/><block var="client"/><block var="options"/></list></block></block></script></block></script><list></list></block></block><block s="doSetVar"><l>onevent</l><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l><l>message</l><l>callback</l></list><l>client.on(message, function (t,m,p) {&#xD;  console.log("This client :" + this)&#xD;  console.log("Client&apos;s parent :" + this.parent)&#xD;  invoke(callback, new List([t, m, p]))&#xD;})</l></block><list><block var="client"/><block var="message"/><block var="callback"/></list></block></script><list><l>message</l><l>callback</l></list></block></block><block s="doSetVar"><l>subscribe</l><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l><l>topic</l></list><l>client.subscribe(topic)&#xD;console.log("Subscribed to " + topic)</l></block><list><block var="client"/><block var="topic"/></list></block></script><list><l>topic</l></list></block></block><block s="doSetVar"><l>unsubscribe</l><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l><l>topic</l></list><l>client.unsubscribe(topic)</l></block><list><block var="client"/><block var="topic"/></list></block></script><list><l>topic</l></list></block></block><block s="doSetVar"><l>publish</l><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l><l>topic</l><l>message</l></list><l>client.publish(topic, message.toString(), function(err){&#xD;  if (err) {&#xD;    console.log("err : " + err)&#xD;  }&#xD;  else {&#xD;    console.log("Publish succeeded")&#xD;  }&#xD;})</l></block><list><block var="client"/><block var="topic"/><block var="message"/></list></block></script><list><l>topic</l><l>message</l></list></block></block><block s="doSetVar"><l>is_connected</l><block s="reifyScript"><script><block s="doIfElse"><block s="reportEquals"><block var="client"/><l>null</l></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>client</l></list><l>return client.connected</l></block><list><block var="client"/></list></block></block></script></block></script><list></list></block></block><block s="doSetVar"><l>log_client</l><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l></list><l>console.log(client)</l></block><list><block var="client"/></list></block><block s="doReport"><block var="client"/></block></script><list></list></block></block><block s="doSetVar"><l>log_parent_sprite</l><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l></list><l>console.log(client.parent)</l></block><list><block var="client"/></list></block></script><list></list></block></block><block s="doSetVar"><l>end</l><block s="reifyScript"><script><block s="doIfElse"><block s="reportNot"><block s="reportEquals"><block var="client"/><l>null</l></block></block><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l><l>force</l></list><l>console.log(client.options.clientId + " is disconnecting...")&#xD;client.end(force)&#xD;world.mqttClients.splice(world.mqttClients.findIndex(function(c) {&#xD;  return client.options.clientId === c.options.clientId&#xD;}),1)</l></block><list><block var="client"/><block var="force"/></list></block><block s="doSetVar"><l>client</l><l>null</l></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>client</l></list><l>console.log("No client connected yet.")</l></block><list><block var="client"/></list></block></script></block></script><list><l>force</l></list></block></block><block s="doReport"><block s="reifyScript"><script><block s="doIf"><block s="reportEquals"><block var="message"/><l>connect</l></block><script><block s="doReport"><block var="connect"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>onevent</l></block><script><block s="doReport"><block var="onevent"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>subscribe</l></block><script><block s="doReport"><block var="subscribe"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>unsubscribe</l></block><script><block s="doReport"><block var="unsubscribe"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>publish</l></block><script><block s="doReport"><block var="publish"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>is_connected</l></block><script><block s="doReport"><block var="is_connected"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>log_client</l></block><script><block s="doReport"><block var="log_client"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>log_parent_sprite</l></block><script><block s="doReport"><block var="log_parent_sprite"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="message"/><l>end</l></block><script><block s="doReport"><block var="end"/></block></script></block><block s="doReport"><block s="reportJoinWords"><list><l></l><block var="message"/></list></block></block></script><list><l>message</l></list></block><comment w="90" collapsed="false">and the main body of the class</comment></block></script><scripts><script x="285" y="3347.0000000000086"><block s="doSetVar"><l>got message</l><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></scripts></block-definition><block-definition s="Connect %&apos;client&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt-client</input></inputs><script><block s="doRun"><block s="evaluate"><block var="client"/><list><l>connect</l></list></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block var="client"/><list><l>is_connected</l></list></block></block></script></block-definition><block-definition s="End %&apos;client&apos; with force %&apos;force&apos;" type="command" category="sensing"><comment x="0" y="0" w="156" collapsed="false">End MQTT Client with force True or False. Default : False</comment><header></header><code></code><translations></translations><inputs><input type="%s">mqtt-client</input><input type="%b"></input></inputs><script><block s="doRun"><block s="evaluate"><block var="client"/><list><l>end</l></list></block><list><block var="force"/></list></block><block s="doWaitUntil"><block s="reportNot"><custom-block s="%s is connected ?"><block var="client"/></custom-block></block></block></script></block-definition><block-definition s="Publish %&apos;payload&apos; on %&apos;topic&apos; for %&apos;client&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">message</input><input type="%txt">topic</input><input type="%s">mqtt-client</input></inputs><script><block s="doRun"><block s="evaluate"><block var="client"/><list><l>publish</l></list></block><list><block var="topic"/><block var="payload"/></list></block></script></block-definition><block-definition s="Subscribe %&apos;client&apos; to %&apos;topic&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt client</input><input type="%s">topic</input></inputs><script><block s="doRun"><block s="evaluate"><block var="client"/><list><l>subscribe</l></list></block><list><block var="topic"/></list></block></script></block-definition><block-definition s="%&apos;client&apos; is connected ?" type="predicate" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt-client</input></inputs><script><block s="doRun"><block s="evaluate"><block var="client"/><list><l>is_connected</l></list></block><list></list></block></script></block-definition><block-definition s="JSON from %&apos;list&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doDeclareVariables"><list><l>a</l><l>item</l><l>index</l></list></block><block s="doSetVar"><l>index</l><l>0</l></block><block s="doSetVar"><l>a</l><l>{</l></block><block s="doRepeat"><block s="reportListLength"><block var="list"/></block><script><block s="doChangeVar"><l>index</l><l>1</l></block><block s="doSetVar"><l>item</l><block s="reportListItem"><block var="index"/><block var="list"/></block></block><block s="doSetVar"><l>a</l><block s="reportJoinWords"><list><block var="a"/><l>"</l><block s="reportListItem"><l>1</l><block var="item"/></block><l>":"</l><block s="reportListItem"><l>2</l><block var="item"/></block><l>",</l></list></block></block></script></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>json</l></list><l>return JSON.parse(json)</l></block><list><block s="reportJoinWords"><list><block var="a"/><l>"end":"" }</l></list></block></list></block></block></script></block-definition><block-definition s="on %&apos;client&apos; %&apos;event&apos; %&apos;do&apos; with %&apos;arg1&apos; %&apos;arg2&apos; %&apos;arg3&apos;" type="command" category="sensing"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt-client</input><input type="%txt">event</input><input type="%cs"></input><input type="%upvar"></input><input type="%upvar"></input><input type="%upvar"></input></inputs><script><block s="doRun"><block s="evaluate"><block var="client"/><list><l>onevent</l></list></block><list><block var="event"/><block s="reifyScript"><script><block s="doSetVar"><l>arg1</l><block var="#1"/></block><block s="doSetVar"><l>arg2</l><block var="#2"/></block><block s="doSetVar"><l>arg3</l><block var="#3"/></block><block s="doRun"><block var="do"/><list></list></block></script><list><l>#1</l><l>#2</l><l>#3</l></list></block></list></block></script><scripts><script x="20" y="295.00000399999993"><block s="doRun"><block s="reportJSFunction"><list><l>a1</l><l>a2</l><l>a3</l></list><l>console.log(this)&#xD;console.log(a1)&#xD;console.log(a2)&#xD;console.log(a3)</l></block><list><block var="arg1"/><block var="arg2"/><block var="arg3"/></list><comment w="207" collapsed="false">Do not remove this block. It may help to debug your callback</comment></block></script></scripts></block-definition><block-definition s="listify %&apos;jsonString&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>jsonString</l></list><l>return listify(JSON.parse(jsonString));&#xD;&#xD;function listify(jsonObject) {&#xD;  if (jsonObject instanceof Array) {&#xD;    return new List(jsonObject.map(function(eachElement) { return listify(eachElement)}));&#xD;  } else if (jsonObject instanceof Object) {&#xD;    return new List(Object.keys(jsonObject).map(function(eachKey) { return new List([eachKey,listify(jsonObject[eachKey])])} ))&#xD;  } else {&#xD;    return jsonObject&#xD;  }&#xD;}</l></block><list><block var="jsonString"/></list></block></block></script></block-definition><block-definition s="# %&apos;comment&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%code">your comment line here</input></inputs></block-definition></blocks>