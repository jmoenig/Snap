<blocks app="Snap! 5.0, http://snap.berkeley.edu" version="1"><block-definition s="ENABLE HELP TRANSLATOR" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>isDone</l></list></block><block s="doSetVar"><l>isDone</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var done = false;&#xD;&#xD;function initialize () {&#xD;    var jszipScript = document.createElement(&apos;script&apos;);&#xD;    jszipScript.src = &apos;libraries/jszip.min.js&apos;;&#xD;    jszipScript.onload = loadHelp;&#xD;    document.head.appendChild(jszipScript);&#xD;&#xD;    function loadHelp () {&#xD;        var helpScript = document.createElement(&apos;script&apos;);&#xD;        helpScript.src = &apos;libraries/help.js&apos;;&#xD;        helpScript.onload = finish;&#xD;        document.head.appendChild(helpScript);&#xD;    }&#xD;&#xD;    function finish () {&#xD;        done = true;&#xD;    }&#xD;}&#xD;&#xD;function isDone () {&#xD;    return done;&#xD;}&#xD;&#xD;if (!window.HelpScreenMorph) {&#xD;    initialize();&#xD;} else {&#xD;    done = true;&#xD;}&#xD;return isDone;</l></block><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block var="isDone"/><list></list></block></block></script></block-definition><block-definition s="download help screen for spec %&apos;spec&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>isDone</l></list></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return !window.HelpScreenMorph;</l></block><list></list></block><script><custom-block s="ENABLE HELP TRANSLATOR"></custom-block></script></block><block s="doIf"><block s="reportGreaterThan"><block s="reportStringSize"><block var="spec"/></block><l>0</l></block><script><block s="doSetVar"><l>isDone</l><block s="evaluate"><block s="reportJSFunction"><list><l>spec</l></list><l>var done = false,&#xD;    error = null,&#xD;    ide = world.children[0];&#xD;&#xD;function downloadHelpScreen (err, screen) {&#xD;    if (err) {&#xD;        error = err;&#xD;    } else {&#xD;        ide.saveCanvasAs(screen.fullImageClassic(), spec);&#xD;        done = true;&#xD;    }&#xD;}&#xD;&#xD;ide.getURL(&#xD;    ide.resourceURL(&apos;help&apos;, SnapTranslator.language, spec + &apos;.xml?t=&apos; + Date.now()),&#xD;    function (xmlString) {&#xD;        if (xmlString) {&#xD;            new SnapSerializer().loadHelpScreen(&#xD;                xmlString, downloadHelpScreen&#xD;            );&#xD;        } else {&#xD;            error = new Error(&apos;could not retrieve help screen &apos; + spec);&#xD;        }&#xD;    }&#xD;);&#xD;&#xD;function isDone () {&#xD;    if (error) {&#xD;        throw error;&#xD;    }&#xD;    return done;&#xD;}&#xD;&#xD;return isDone;</l></block><list><block var="spec"/></list></block></block><block s="doWaitUntil"><block s="evaluate"><block var="isDone"/><list></list></block></block></script></block></script></block-definition><block-definition s="download help screen for %&apos;lambda&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input></inputs><script><block s="doDeclareVariables"><list><l>spec</l></list></block><block s="doSetVar"><l>spec</l><block s="evaluate"><block s="reportJSFunction"><list><l>context</l></list><l>var block, spec;&#xD;if (!(context.expression instanceof BlockMorph)) {&#xD;    return &apos;&apos;;&#xD;}&#xD;block = context.expression.topBlock()&#xD;if (block.isCustomBlock) {&#xD;    if (block.isGlobal) {&#xD;        spec = block.definition.helpSpec();&#xD;    } else {&#xD;        spec = block.scriptTarget().getMethod(block.blockSpec).helpSpec();&#xD;    }&#xD;} else {&#xD;    spec = block.selector;&#xD;}&#xD;return spec;</l></block><list><block var="lambda"/></list></block></block><custom-block s="download help screen for spec %s"><block var="spec"/></custom-block></script></block-definition><block-definition s="download all help screens" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>isDone</l></list></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return !window.HelpScreenMorph;</l></block><list></list></block><script><custom-block s="ENABLE HELP TRANSLATOR"></custom-block></script></block><block s="doSetVar"><l>isDone</l><block s="evaluate"><block s="reportJSFunction"><list></list><l>var done = false,&#xD;    error = null,&#xD;    ide = world.children[0],&#xD;    zip = new JSZip();&#xD;&#xD;function handleHelpScreens (list) {&#xD;    var spec = list.shift();&#xD;    if (spec) {&#xD;        ide.getURL(&#xD;            ide.resourceURL(&apos;help&apos;, SnapTranslator.language, spec + &apos;.xml?t=&apos; + Date.now()),&#xD;            function (xmlString) {&#xD;                if (xmlString) {&#xD;                    new SnapSerializer().loadHelpScreen(&#xD;                        xmlString,&#xD;                        function (err, screen) {&#xD;                            if (err) {&#xD;                                error = err;&#xD;                            } else {&#xD;                                zip.file(&#xD;                                    spec + &apos;.png&apos;,&#xD;                                    screen.fullImageClassic().toDataURL().split(&apos;,&apos;)[1],&#xD;                                    { base64: true }&#xD;                                );&#xD;                                handleHelpScreens(list);&#xD;                            }&#xD;                        }&#xD;                    );&#xD;                } else {&#xD;                    error = new Error(&apos;could not retrieve help screen &apos; + spec);&#xD;                }&#xD;            }&#xD;        );&#xD;    } else {&#xD;        zip.generateAsync({type: &apos;blob&apos;})&#xD;            .then(function (blob) {&#xD;                saveAs(blob, SnapTranslator.language + &apos;.zip&apos;);&#xD;                done = true;&#xD;            });&#xD;    }&#xD;}&#xD;&#xD;function isDone () {&#xD;    if (error) {&#xD;        throw error;&#xD;    }&#xD;    return done;&#xD;}&#xD;&#xD;ide.getURL(&#xD;    ide.resourceURL(&apos;help&apos;, SnapTranslator.language, &apos;HELP?t=&apos; + Date.now()),&#xD;    function (str) {&#xD;        if (str) {&#xD;            handleHelpScreens(str.trim().split(&apos;\n&apos;));&#xD;        } else {&#xD;            error = new Error(&apos;could not retrieve help screens list&apos;);&#xD;        }&#xD;    }&#xD;);&#xD;return isDone;</l></block><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block var="isDone"/><list></list></block></block></script></block-definition></blocks>