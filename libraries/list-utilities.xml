<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="%&apos;list&apos; .concat %&apos;lists&apos;" type="reporter" category="lists"><header></header><code></code><inputs><input type="%l"></input><input type="%mult%l"></input></inputs><script><custom-block s="let %upvar be %s"><l>ret</l><block var="list"/></custom-block><custom-block s="let %upvar be %s"><l>func</l><block s="reifyScript"><script><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block s="reportListLength"><block var="list1"/></block><l>1</l></block><block s="reportLessThan"><block s="reportListLength"><block var="list2"/></block><l>1</l></block></block><script><block s="doIfElse"><block s="reportLessThan"><block s="reportListLength"><block var="list1"/></block><l>1</l></block><script><block s="doReport"><block var="list2"/></block></script><script><block s="doReport"><block var="list1"/></block></script></block></script></block><block s="doIf"><block s="reportLessThan"><block s="reportListLength"><block var="list1"/></block><l>2</l></block><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="list1"/></block><block var="list2"/></block></block></script></block><block s="doIf"><block s="reportLessThan"><block s="reportListLength"><block var="list2"/></block><l>2</l></block><script><custom-block s="let %upvar be %s"><l>tmp</l><custom-block s="copy of %l"><block var="list1"/></custom-block></custom-block><block s="doAddToList"><block s="reportListItem"><l>1</l><block var="list2"/></block><block var="tmp"/></block><block s="doReport"><block var="tmp"/></block></script></block><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="list1"/></block><block s="evaluate"><block var="func"/><list><block s="reportCDR"><block var="list1"/></block><block var="list2"/></list></block></block></block></script><list><l>list1</l><l>list2</l></list><comment w="273" collapsed="true">It&apos;s b/c block before been %list1 .concat %list2</comment></block></custom-block><custom-block s="%l .forEach %upvar %cs"><block var="lists"/><l>l</l><script><block s="doSetVar"><l>ret</l><block s="evaluate"><block var="func"/><list><block var="ret"/><block var="l"/></list></block></block></script></custom-block><block s="doReport"><block var="ret"/></block></script></block-definition><block-definition s="%&apos;list&apos; .forEach %&apos;each&apos; %&apos;action&apos;" type="command" category="lists"><header></header><code></code><inputs><input type="%l"></input><input type="%upvar"></input><input type="%cs"></input></inputs><script><custom-block s="let %upvar be %s"><l>i</l><l>0</l></custom-block><custom-block s="let %upvar be %s"><l>jsfunc?</l><block s="evaluate"><block s="reportJSFunction"><list><l>act</l></list><l>return act instanceof Function</l></block><list><block var="action"/></list></block></custom-block><block s="doRepeat"><block s="reportListLength"><block var="list"/></block><script><block s="doChangeVar"><l>i</l><l>1</l></block><block s="doSetVar"><l>each</l><block s="reportListItem"><block var="i"/><block var="list"/></block></block><block s="doIfElse"><block var="jsfunc?"/><script><block s="doRun"><block var="action"/><list><block var="each"/><block var="i"/><block var="list"/></list><comment w="172" collapsed="false">JavaScript function:&#xD;array-style calling (each,index,array)&#xD;or here (each,list-index,list)</comment></block></script><script><block s="doRun"><block var="action"/><list><block var="each"/></list></block></script></block></script></block></script></block-definition><block-definition s="let %&apos;a&apos; be %&apos;value&apos;" type="command" category="other"><header></header><code></code><inputs><input type="%upvar"></input><input type="%s"></input></inputs><script><block s="doSetVar"><l>a</l><block var="value"/></block></script></block-definition><block-definition s="%&apos;list&apos; .map %&apos;rep&apos;" type="reporter" category="lists"><header></header><code></code><inputs><input type="%l"></input><input type="%repRing"></input></inputs><script><custom-block s="let %upvar be %s"><l>result</l><block s="reportNewList"><list></list></block></custom-block><custom-block s="%l .forEach %upvar %cs"><block var="list"/><l>each</l><script><block s="doAddToList"><block s="evaluate"><block var="rep"/><list><block var="each"/></list></block><block var="result"/></block></script></custom-block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="%&apos;list&apos; .filter %&apos;pred&apos;" type="reporter" category="lists"><header></header><code></code><inputs><input type="%l"></input><input type="%predRing"></input></inputs><script><custom-block s="let %upvar be %s"><l>result</l><block s="reportNewList"><list></list></block></custom-block><custom-block s="%l .forEach %upvar %cs"><block var="list"/><l>each</l><script><block s="doIf"><block s="evaluate"><block var="pred"/><list><block var="each"/></list></block><script><block s="doAddToList"><block var="each"/><block var="result"/></block></script></block></script></custom-block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="%&apos;list&apos; .some %&apos;pred&apos;" type="predicate" category="lists"><header></header><code></code><inputs><input type="%l"></input><input type="%predRing"></input></inputs><script><custom-block s="%l .forEach %upvar %cs"><block var="list"/><l>each</l><script><block s="doIf"><block s="evaluate"><block var="pred"/><list><block var="each"/></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block></script></custom-block><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block-definition><block-definition s="%&apos;list&apos; .every %&apos;pred&apos;" type="predicate" category="lists"><header></header><code></code><inputs><input type="%l"></input><input type="%predRing"></input></inputs><script><custom-block s="%l .forEach %upvar %cs"><block var="list"/><l>each</l><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block var="pred"/><list><block var="each"/></list></block></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block></script></custom-block><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block-definition><block-definition s="%&apos;list1&apos; .concat(ogr) %&apos;list2&apos;" type="reporter" category="lists"><comment w="90" collapsed="false">original</comment><header></header><code></code><inputs><input type="%l"></input><input type="%l"></input></inputs><script><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block s="reportListLength"><block var="list1"/></block><l>1</l></block><block s="reportLessThan"><block s="reportListLength"><block var="list2"/></block><l>1</l></block></block><script><block s="doIfElse"><block s="reportLessThan"><block s="reportListLength"><block var="list1"/></block><l>1</l></block><script><block s="doReport"><block var="list2"/></block></script><script><block s="doReport"><block var="list1"/></block></script></block></script></block><block s="doIf"><block s="reportLessThan"><block s="reportListLength"><block var="list1"/></block><l>2</l></block><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="list1"/></block><block var="list2"/></block></block></script></block><block s="doIf"><block s="reportLessThan"><block s="reportListLength"><block var="list2"/></block><l>2</l></block><script><custom-block s="let %upvar be %s"><l>tmp</l><custom-block s="copy of %l"><block var="list1"/></custom-block></custom-block><block s="doAddToList"><block s="reportListItem"><l>1</l><block var="list2"/></block><block var="tmp"/></block><block s="doReport"><block var="tmp"/></block></script></block><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="list1"/></block><custom-block s="%l .concat(ogr) %l"><block s="reportCDR"><block var="list1"/></block><block var="list2"/></custom-block></block></block></script></block-definition><block-definition s="copy of %&apos;list&apos;" type="reporter" category="lists"><header></header><code></code><inputs><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="%l .map %repRing"><block var="list"/><block s="reifyReporter"><autolambda><block var="#1"/></autolambda><list><l>#1</l></list></block></custom-block></block></script></block-definition><block-definition s="reverse(org) %&apos;list&apos;" type="reporter" category="lists"><comment w="90" collapsed="false">Original</comment><header></header><code></code><inputs><input type="%l"></input></inputs><script><block s="doIf"><block s="reportLessThan"><block s="reportListLength"><block var="list"/></block><l>2</l></block><script><block s="doReport"><block var="list"/></block></script></block><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l><option>last</option></l><block var="list"/></block><custom-block s="reverse(org) %l"><custom-block s="all but last of %l"><block var="list"/></custom-block></custom-block></block></block></script></block-definition><block-definition s="all but last of %&apos;list&apos;" type="reporter" category="lists"><header></header><code></code><inputs><input type="%l"></input></inputs><script><custom-block s="let %upvar be %s"><l>tmp</l><custom-block s="copy of %l"><block var="list"/></custom-block></custom-block><block s="doDeleteFromList"><l><option>last</option></l><block var="tmp"/></block><block s="doReport"><block var="tmp"/></block></script></block-definition><block-definition s="%&apos;list&apos; .slice %&apos;start&apos; %&apos;end&apos;" type="reporter" category="lists"><comment x="0" y="0" w="158" collapsed="true">2&apos;nd parameter is optional</comment><header></header><code></code><inputs><input type="%l"></input><input type="%n">1</input><input type="%n">0</input></inputs><script><block s="doIf"><block s="reportOr"><block s="reportEquals"><block var="end"/><l>0</l></block><block s="reportGreaterThan"><block var="end"/><block s="reportListLength"><block var="list"/></block></block></block><script><block s="doSetVar"><l>end</l><block s="reportListLength"><block var="list"/></block></block></script></block><block s="doIf"><block s="reportLessThan"><block var="start"/><l>1</l></block><script><block s="doSetVar"><l>start</l><block s="reportListLength"><block var="list"/></block></block></script></block><block s="doIf"><block s="reportGreaterThan"><block var="start"/><block s="reportListLength"><block var="list"/></block></block><script><block s="doSetVar"><l>start</l><l>0</l></block></script></block><block s="doIf"><block s="reportGreaterThan"><block var="start"/><block s="reportDifference"><block var="end"/><l>1</l></block></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportListItem"><block var="start"/><block var="list"/></block></list></block></block></script></block><custom-block s="let %upvar be %s"><l>result</l><custom-block s="copy of %l"><block var="list"/></custom-block></custom-block><block s="doRepeat"><block s="reportDifference"><block var="start"/><l>1</l></block><script><block s="doSetVar"><l>result</l><block s="reportCDR"><block var="result"/></block></block></script></block><block s="doRepeat"><block s="reportDifference"><block s="reportListLength"><block var="list"/></block><block var="end"/></block><script><block s="doSetVar"><l>result</l><custom-block s="all but last of %l"><block var="result"/></custom-block></block></script></block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="append %&apos;lists&apos;" type="reporter" category="lists"><comment x="0" y="0" w="287" collapsed="false">Take any number of input lists, and create a new list containing the items of the input lists.  So&#xD;              APPEND [A B] [C D]&#xD;where the [,,,] are lists reports the list&#xD;              [A B C D]&#xD;not [[A B] [C D]].</comment><header></header><code></code><inputs><input type="%mult%l"></input></inputs><script><block s="doWarp"><script><block s="doIf"><block s="reportEquals"><block var="lists"/><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block s="reportListLength"><block var="lists"/></block><l>1</l></block><script><block s="doReport"><block s="reportListItem"><l>1</l><block var="lists"/></block></block></script></block><block s="doIf"><block s="reportEquals"><block s="reportListItem"><l>1</l><block var="lists"/></block><block s="reportNewList"><list></list></block></block><script><block s="doReport"><custom-block s="append %mult%l"><block s="reportCDR"><block var="lists"/></block></custom-block></block></script></block><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block s="reportListItem"><l>1</l><block var="lists"/></block></block><custom-block s="append %mult%l"><block s="reportCONS"><block s="reportCDR"><block s="reportListItem"><l>1</l><block var="lists"/></block></block><block s="reportCDR"><block var="lists"/></block></block></custom-block></block></block></script></block></script></block-definition><block-definition s="reverse %&apos;data&apos;" type="reporter" category="lists"><comment w="223" collapsed="false">From list-utilites.xml&#xD;Reports a new list containing the items of the input list, but in the opposite order.</comment><header></header><code></code><inputs><input type="%l"></input></inputs><script><block s="doDeclareVariables"><list><l>helper</l></list></block><block s="doSetVar"><l>helper</l><block s="reifyScript"><script><block s="doIf"><block s="reportEquals"><block var="input"/><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block var="result"/></block></script></block><block s="doReport"><block s="evaluate"><block var="helper"/><list><block s="reportCDR"><block var="input"/></block><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="input"/></block><block var="result"/></block></list></block></block></script><list><l>input</l><l>result</l></list></block></block><block s="doWarp"><script><block s="doReport"><block s="evaluate"><block var="helper"/><list><block var="data"/><block s="reportNewList"><list></list></block></list></block></block></script></block></script></block-definition><block-definition s="remove duplicates from %&apos;data&apos;" type="reporter" category="lists"><comment x="0" y="0" w="209" collapsed="false">Reports a new list whose items are the same as in the input list, except that if two or more equal items appear in the input list, only the last one is kept in the result.</comment><header></header><code></code><inputs><input type="%l"></input></inputs><script><block s="doWarp"><script><block s="doIf"><block s="reportEquals"><block var="data"/><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script></block><block s="doIfElse"><block s="reportListContainsItem"><block s="reportCDR"><block var="data"/></block><block s="reportListItem"><l>1</l><block var="data"/></block></block><script><block s="doReport"><custom-block s="remove duplicates from %l"><block s="reportCDR"><block var="data"/></block></custom-block></block></script><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="data"/></block><custom-block s="remove duplicates from %l"><block s="reportCDR"><block var="data"/></block></custom-block></block></block></script></block></script></block></script></block-definition><block-definition s="sort %&apos;data&apos; ordering with %&apos;function&apos;" type="reporter" category="lists"><comment x="0" y="0" w="204" collapsed="false">Reports a sorted version of the list in its first input slot, using the comparison function in the second input slot.  For a list of numbers, using &lt; as the comparison function will sort from low to high; using &gt; will sort from high to low.</comment><header></header><code></code><inputs><input type="%l"></input><input type="%predRing"></input></inputs><script><block s="doDeclareVariables"><list><l>even items</l><l>odd items</l><l>merge</l></list></block><block s="doSetVar"><l>odd items</l><block s="reifyScript"><script><block s="doIf"><block s="reportEquals"><l></l><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script></block><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><l/></block><block s="evaluate"><block var="even items"/><list><block s="reportCDR"><l/></block></list></block></block></block></script><list></list></block></block><block s="doSetVar"><l>even items</l><block s="reifyScript"><script><block s="doIf"><block s="reportEquals"><l></l><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script></block><block s="doReport"><block s="evaluate"><block var="odd items"/><list><block s="reportCDR"><l/></block></list></block></block></script><list></list></block></block><block s="doSetVar"><l>merge</l><block s="reifyScript"><script><block s="doIf"><block s="reportEquals"><block var="#1"/><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block var="#2"/></block></script></block><block s="doIf"><block s="reportEquals"><block var="#2"/><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block var="#1"/></block></script></block><block s="doIfElse"><block s="evaluate"><block var="function"/><list><block s="reportListItem"><l>1</l><block var="#1"/></block><block s="reportListItem"><l>1</l><block var="#2"/></block></list></block><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="#1"/></block><block s="evaluate"><block var="merge"/><list><block s="reportCDR"><block var="#1"/></block><block var="#2"/></list></block></block></block></script><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="#2"/></block><block s="evaluate"><block var="merge"/><list><block var="#1"/><block s="reportCDR"><block var="#2"/></block></list></block></block></block></script></block></script><list><l>#1</l><l>#2</l></list></block></block><block s="doIf"><block s="reportEquals"><block var="data"/><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block s="reportCDR"><block var="data"/></block><block s="reportNewList"><list></list></block></block><script><block s="doReport"><block var="data"/></block></script></block><block s="doReport"><block s="evaluate"><block var="merge"/><list><custom-block s="sort %l ordering with %predRing"><block s="evaluate"><block var="odd items"/><list><block var="data"/></list></block><block var="function"/></custom-block><custom-block s="sort %l ordering with %predRing"><block s="evaluate"><block var="even items"/><list><block var="data"/></list></block><block var="function"/></custom-block></list></block></block></script></block-definition><block-definition s="%&apos;list&apos; .asArray" type="reporter" category="lists"><header></header><code></code><inputs><input type="%l"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>l</l></list><l>return l instanceof List&#xD;       ? l.asArray()&#xD;       : []</l></block><list><block var="list"/></list></block></block></script></block-definition></blocks>
