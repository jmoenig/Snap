{"version":3,"file":"Midi.js","mappings":"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","sources":["webpack://@tonejs/midi/webpack/universalModuleDefinition","webpack://@tonejs/midi/./node_modules/array-flatten/dist.es2015/index.js","webpack://@tonejs/midi/./node_modules/midi-file/index.js","webpack://@tonejs/midi/./node_modules/midi-file/lib/midi-parser.js","webpack://@tonejs/midi/./node_modules/midi-file/lib/midi-writer.js","webpack://@tonejs/midi/./src/BinarySearch.ts","webpack://@tonejs/midi/./src/ControlChange.ts","webpack://@tonejs/midi/./src/ControlChanges.ts","webpack://@tonejs/midi/./src/Encode.ts","webpack://@tonejs/midi/./src/Header.ts","webpack://@tonejs/midi/./src/Instrument.ts","webpack://@tonejs/midi/./src/InstrumentMaps.ts","webpack://@tonejs/midi/./src/Midi.ts","webpack://@tonejs/midi/./src/Note.ts","webpack://@tonejs/midi/./src/PitchBend.ts","webpack://@tonejs/midi/./src/Track.ts","webpack://@tonejs/midi/webpack/bootstrap","webpack://@tonejs/midi/webpack/runtime/define property getters","webpack://@tonejs/midi/webpack/runtime/hasOwnProperty shorthand","webpack://@tonejs/midi/webpack/runtime/make namespace object","webpack://@tonejs/midi/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","/**\n * Flatten an array indefinitely.\n */\nexport function flatten(array) {\n    var result = [];\n    $flatten(array, result);\n    return result;\n}\n/**\n * Internal flatten function recursively passes `result`.\n */\nfunction $flatten(array, result) {\n    for (var i = 0; i < array.length; i++) {\n        var value = array[i];\n        if (Array.isArray(value)) {\n            $flatten(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n","// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n","/**\n * Return the index of the element at or before the given property\n * @hidden\n */\nexport function search(array: any[], value: any, prop = \"ticks\"): number {\n\tlet beginning = 0;\n\tconst len = array.length;\n\tlet end = len;\n\tif (len > 0 && array[len - 1][prop] <= value) {\n\t\treturn len - 1;\n\t}\n\twhile (beginning < end) {\n\t\t// calculate the midpoint for roughly equal partition\n\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\tconst event = array[midPoint];\n\t\tconst nextEvent = array[midPoint + 1];\n\t\tif (event[prop] === value) {\n\t\t\t// choose the last one that has the same value\n\t\t\tfor (let i = midPoint; i < array.length; i++) {\n\t\t\t\tconst testEvent = array[i];\n\t\t\t\tif (testEvent[prop] === value) {\n\t\t\t\t\tmidPoint = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] < value && nextEvent[prop] > value) {\n\t\t\treturn midPoint;\n\t\t} else if (event[prop] > value) {\n\t\t\t// search lower\n\t\t\tend = midPoint;\n\t\t} else if (event[prop] < value) {\n\t\t\t// search upper\n\t\t\tbeginning = midPoint + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @hidden\n */\nexport function insert(array: any[], event: object, prop = \"ticks\"): void {\n\tif (array.length) {\n\t\tconst index = search(array, event[prop], prop);\n\t\tarray.splice(index + 1, 0, event);\n\t} else {\n\t\tarray.push(event);\n\t}\n}\n","import type { MidiControllerEvent } from \"midi-file\";\nimport { Header } from \"./Header\";\n\n/**\n * @hidden\n */\nexport type ControlChangeName =\n\t| \"modulationWheel\"\n\t| \"breath\"\n\t| \"footController\"\n\t| \"portamentoTime\"\n\t| \"volume\"\n\t| \"balance\"\n\t| \"pan\"\n\t| \"sustain\"\n\t| \"portamentoTime\"\n\t| \"sostenuto\"\n\t| \"softPedal\"\n\t| \"legatoFootswitch\"\n\t| \"portamentoControl\";\n\ninterface ControlChangeMap {\n\t[key: number]: ControlChangeName;\n}\n/**\n * A map of values to control change names\n * @hidden\n */\nexport const controlChangeNames: ControlChangeMap = {\n\t1: \"modulationWheel\",\n\t2: \"breath\",\n\t4: \"footController\",\n\t5: \"portamentoTime\",\n\t7: \"volume\",\n\t8: \"balance\",\n\t10: \"pan\",\n\t64: \"sustain\",\n\t65: \"portamentoTime\",\n\t66: \"sostenuto\",\n\t67: \"softPedal\",\n\t68: \"legatoFootswitch\",\n\t84: \"portamentoControl\",\n};\n\n/**\n * swap the keys and values\n * @hidden\n */\nexport const controlChangeIds = Object.keys(controlChangeNames).reduce((obj, key) => {\n\tobj[controlChangeNames[key]] = key;\n\treturn obj;\n}, {});\n\nconst privateHeaderMap = new WeakMap<ControlChange, Header>();\nconst privateCCNumberMap = new WeakMap<ControlChange, number>();\n\n/**\n * Represents a control change event\n */\nexport class ControlChange implements ControlChangeInterface {\n\n\t/**\n\t * The number value of the event\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiControllerEvent & { absoluteTime: number }>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\t\tprivateCCNumberMap.set(this, event.controllerType);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The controller number\n\t */\n\tget number(): number {\n\t\treturn privateCCNumberMap.get(this);\n\t}\n\n\t/**\n\t * return the common name of the control number if it exists\n\t */\n\tget name(): ControlChangeName {\n\t\tif (controlChangeNames[this.number]) {\n\t\t\treturn controlChangeNames[this.number];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): ControlChangeJSON {\n\t\treturn {\n\t\t\tnumber: this.number,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface ControlChangeJSON {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface ControlChangeInterface {\n\tnumber: number;\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import { controlChangeIds } from \"./ControlChange\";\nimport { ControlChange, ControlChangeJSON } from \"./ControlChange\";\n\nexport interface ControlChanges {\n\t[key: string]: ControlChange[];\n\t[key: number]: ControlChange[];\n}\n\nexport interface ControlChangesJSON {\n\t[key: string]: ControlChangeJSON[];\n\t[key: number]: ControlChangeJSON[];\n}\n\n/**\n * Automatically creates an alias for named control values using Proxies\n * @hidden\n */\nexport function createControlChanges(): ControlChanges {\n\treturn new Proxy({}, {\n\t\t// tslint:disable-next-line: typedef\n\t\tget(target, handler) {\n\t\t\tif (target[handler]) {\n\t\t\t\treturn target[handler];\n\t\t\t} else if (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\treturn target[controlChangeIds[handler]];\n\t\t\t}\n\t\t},\n\t\t// tslint:disable-next-line: typedef\n\t\tset(target, handler, value) {\n\t\t\tif (controlChangeIds.hasOwnProperty(handler)) {\n\t\t\t\ttarget[controlChangeIds[handler]] = value;\n\t\t\t} else {\n\t\t\t\ttarget[handler] = value;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t});\n}\n","import { writeMidi } from \"midi-file\";\n\nimport type {\n\tMidiControllerEvent, MidiData, MidiEndOfTrackEvent,\n\tMidiEvent, MidiKeySignatureEvent,\n\tMidiNoteOffEvent, MidiNoteOnEvent, MidiPitchBendEvent,\n\tMidiProgramChangeEvent, MidiSetTempoEvent, MidiTextEvent,\n\tMidiTimeSignatureEvent, MidiTrackNameEvent\n} from \"midi-file\";\n\nimport { KeySignatureEvent, keySignatureKeys, MetaEvent, TempoEvent, TimeSignatureEvent } from \"./Header\";\nimport { ControlChange } from \"./ControlChange\";\nimport { PitchBend } from \"./PitchBend\";\nimport { Midi } from \"./Midi\";\nimport { Note } from \"./Note\";\nimport { Track } from \"./Track\";\n\nimport { flatten } from \"array-flatten\";\n\n/** Used to add `absoluteTime` property. */\ntype WithAbsoluteTime = { absoluteTime: number };\n\nfunction encodeNote(note: Note, channel: number): [\n\t(MidiNoteOnEvent & WithAbsoluteTime),\n\t(MidiNoteOffEvent & WithAbsoluteTime)\n] {\n\treturn [{\n\t\tabsoluteTime: note.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOn\",\n\t\tvelocity: Math.floor(note.velocity * 127),\n\t},\n\t{\n\t\tabsoluteTime: note.ticks + note.durationTicks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\tnoteNumber: note.midi,\n\t\ttype: \"noteOff\",\n\t\tvelocity: Math.floor(note.noteOffVelocity * 127),\n\t}];\n}\n\nfunction encodeNotes(track: Track): Array<MidiNoteOnEvent | MidiNoteOffEvent> {\n\treturn flatten(track.notes.map(note => encodeNote(note, track.channel))) as unknown as Array<MidiNoteOnEvent | MidiNoteOffEvent>;\n}\n\nfunction encodeControlChange(\n\tcc: ControlChange,\n\tchannel: number\n): (MidiControllerEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: cc.ticks,\n\t\tchannel,\n\t\tcontrollerType: cc.number,\n\t\tdeltaTime: 0,\n\t\ttype: \"controller\",\n\t\tvalue: Math.floor(cc.value * 127),\n\t};\n}\n\nfunction encodeControlChanges(track: Track): MidiControllerEvent[] {\n\tconst controlChanges: MidiControllerEvent[] = [];\n\tfor (let i = 0; i < 127; i++) {\n\t\tif (track.controlChanges.hasOwnProperty(i)) {\n\t\t\ttrack.controlChanges[i].forEach((cc: ControlChange) => {\n\t\t\t\tcontrolChanges.push(encodeControlChange(cc, track.channel));\n\t\t\t});\n\t\t}\n\t}\n\treturn controlChanges;\n}\n\nfunction encodePitchBend(\n\tpb: PitchBend,\n\tchannel: number\n): (MidiPitchBendEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: pb.ticks,\n\t\tchannel,\n\t\tdeltaTime: 0,\n\t\ttype: \"pitchBend\",\n\t\tvalue: pb.value,\n\t};\n}\n\nfunction encodePitchBends(track: Track): MidiPitchBendEvent[] {\n\tconst pitchBends: MidiPitchBendEvent[] = [];\n\ttrack.pitchBends.forEach((pb: PitchBend) => {\n\t\tpitchBends.push(encodePitchBend(pb, track.channel));\n\t});\t\n\treturn pitchBends;\n}\n\nfunction encodeInstrument(track: Track): (MidiProgramChangeEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tchannel: track.channel,\n\t\tdeltaTime: 0,\n\t\tprogramNumber: track.instrument.number,\n\t\ttype: \"programChange\",\n\t};\n}\n\nfunction encodeTrackName(name: string): (MidiTrackNameEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: 0,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: name,\n\t\ttype: \"trackName\",\n\t};\n}\n\nfunction encodeTempo(tempo: TempoEvent): (MidiSetTempoEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: tempo.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\tmicrosecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n\t\ttype: \"setTempo\",\n\t};\n}\n\nfunction encodeTimeSignature(timeSig: TimeSignatureEvent): (MidiTimeSignatureEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: timeSig.ticks,\n\t\tdeltaTime: 0,\n\t\tdenominator: timeSig.timeSignature[1],\n\t\tmeta: true,\n\t\tmetronome: 24,\n\t\tnumerator: timeSig.timeSignature[0],\n\t\tthirtyseconds: 8,\n\t\ttype: \"timeSignature\",\n\t};\n}\n\n// function encodeMeta(event: )\n\nfunction encodeKeySignature(keySig: KeySignatureEvent): (MidiKeySignatureEvent & WithAbsoluteTime) {\n\tconst keyIndex = keySignatureKeys.indexOf(keySig.key);\n\treturn {\n\t\tabsoluteTime: keySig.ticks,\n\t\tdeltaTime: 0,\n\t\tkey: keyIndex + 7,\n\t\tmeta: true,\n\t\tscale: keySig.scale === \"major\" ? 0 : 1,\n\t\ttype: \"keySignature\",\n\t};\n}\n\nfunction encodeText(\n\ttextEvent: (MetaEvent & { ticks: number; })\n): (MidiTextEvent & WithAbsoluteTime) {\n\treturn {\n\t\tabsoluteTime: textEvent.ticks,\n\t\tdeltaTime: 0,\n\t\tmeta: true,\n\t\ttext: textEvent.text,\n\t\ttype: textEvent.type,\n\t} as (MidiTextEvent & WithAbsoluteTime);\n}\n\n/**\n * Convert the MIDI object to an array.\n */\nexport function encode(midi: Midi): Uint8Array {\n\tconst midiData: MidiData = {\n\t\theader: {\n\t\t\tformat: 1,\n\t\t\tnumTracks: midi.tracks.length + 1,\n\t\t\tticksPerBeat: midi.header.ppq,\n\t\t},\n\t\ttracks: [\n\t\t\t[\n\t\t\t\t// The name data.\n\t\t\t\t{\n\t\t\t\t\tabsoluteTime: 0,\n\t\t\t\t\tdeltaTime: 0,\n\t\t\t\t\tmeta: true,\n\t\t\t\t\ttext: midi.header.name,\n\t\t\t\t\ttype: \"trackName\",\n\t\t\t\t} as MidiTrackNameEvent,\n\t\t\t\t...midi.header.keySignatures.map(keySig => encodeKeySignature(keySig)),\n\t\t\t\t// and all the meta events (cloned for safety)\n\t\t\t\t...midi.header.meta.map(e => encodeText(e)),\n\t\t\t\t// the first track is all the tempo data\n\t\t\t\t...midi.header.tempos.map(tempo => encodeTempo(tempo)),\n\t\t\t\t// and the time signature data.\n\t\t\t\t...midi.header.timeSignatures.map(timeSig => encodeTimeSignature(timeSig)),\n\t\t\t],\n\t\t\t// The remaining tracks.\n\t\t\t...midi.tracks.map((track) => {\n\t\t\t\treturn [\n\t\t\t\t\t// Add the name\n\t\t\t\t\tencodeTrackName(track.name),\n\t\t\t\t\t// the instrument\n\t\t\t\t\tencodeInstrument(track),\n\t\t\t\t\t// add the notes\n\t\t\t\t\t...encodeNotes(track),\n\t\t\t\t\t// and the control changes\n\t\t\t\t\t...encodeControlChanges(track),\n\t\t\t\t\t// and the pitch bends.\n\t\t\t\t\t...encodePitchBends(track)\n\t\t\t\t];\n\t\t\t}),\n\t\t],\n\t};\n\n\t// Sort and set `deltaTime` of all of the tracks.\n\tmidiData.tracks = midiData.tracks.map((track: (MidiEvent & WithAbsoluteTime)[]) => {\n\t\ttrack = track.sort((a, b) => a.absoluteTime - b.absoluteTime);\n\t\t\n\t\tlet lastTime = 0;\n\t\ttrack.forEach(note => {\n\t\t\tnote.deltaTime = note.absoluteTime - lastTime;\n\t\t\tlastTime = note.absoluteTime;\n\t\t\tdelete note.absoluteTime;\n\t\t});\n\n\t\t// End of track.\n\t\ttrack.push({\n\t\t\tdeltaTime: 0,\n\t\t\tmeta: true,\n\t\t\ttype: \"endOfTrack\",\n\t\t} as (MidiEndOfTrackEvent & WithAbsoluteTime));\n\t\treturn track;\n\t});\n\n\t// Rreturn `midiData`.\n\treturn new Uint8Array(writeMidi(midiData));\n}\n","import type { MidiData, MidiEvent } from \"midi-file\";\nimport { search } from \"./BinarySearch\";\n\nconst privatePPQMap = new WeakMap<Header, number>();\n\nexport interface TempoEvent {\n\tticks: number;\n\tbpm: number;\n\ttime?: number;\n}\n\nexport interface TimeSignatureEvent {\n\tticks: number;\n\ttimeSignature: number[];\n\tmeasures?: number;\n}\n\nexport interface MetaEvent {\n\ttext: string;\n\ttype: string;\n\tticks: number;\n}\n\nexport interface KeySignatureEvent {\n\tticks: number;\n\tkey: string;\n\tscale: string;\n}\n\n/**\n * @hidden\n */\nexport const keySignatureKeys = [\n\t\"Cb\",\n\t\"Gb\",\n\t\"Db\",\n\t\"Ab\",\n\t\"Eb\",\n\t\"Bb\",\n\t\"F\",\n\t\"C\",\n\t\"G\",\n\t\"D\",\n\t\"A\",\n\t\"E\",\n\t\"B\",\n\t\"F#\",\n\t\"C#\",\n];\n\n/**\n * The parsed MIDI file header.\n */\nexport class Header {\n\t/**\n\t * The array of all the tempo events.\n\t */\n\ttempos: TempoEvent[] = [];\n\n\t/**\n\t * The time signatures.\n\t */\n\ttimeSignatures: TimeSignatureEvent[] = [];\n\n\t/**\n\t * The time signatures.\n\t */\n\tkeySignatures: KeySignatureEvent[] = [];\n\n\t/**\n\t * Additional meta events.\n\t */\n\tmeta: MetaEvent[] = [];\n\n\t/**\n\t * The name of the MIDI file;\n\t */\n\tname = \"\";\n\n\tconstructor(midiData?: MidiData) {\n\t\t// Look through all the tracks for tempo changes.\n\t\tprivatePPQMap.set(this, 480);\n\n\t\tif (midiData) {\n\t\t\tprivatePPQMap.set(this, midiData.header.ticksPerBeat);\n\t\t\t\n\t\t\t// Check time signature and tempo events from all of the tracks.\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; meta?: boolean; }) => {\n\t\t\t\t\tif (event.meta) {\n\t\t\t\t\t\tif (event.type === \"timeSignature\") {\n\t\t\t\t\t\t\tthis.timeSignatures.push({\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t\ttimeSignature: [\n\t\t\t\t\t\t\t\t\tevent.numerator,\n\t\t\t\t\t\t\t\t\tevent.denominator,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"setTempo\") {\n\t\t\t\t\t\t\tthis.tempos.push({\n\t\t\t\t\t\t\t\tbpm: 60000000 / event.microsecondsPerBeat,\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (event.type === \"keySignature\") {\n\t\t\t\t\t\t\tthis.keySignatures.push({\n\t\t\t\t\t\t\t\tkey: keySignatureKeys[event.key + 7],\n\t\t\t\t\t\t\t\tscale: event.scale === 0 ? \"major\" : \"minor\",\n\t\t\t\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Check the first track for other relevant data.\n\t\t\tlet firstTrackCurrentTicks = 0; // Used for absolute times.\n\t\t\tmidiData.tracks[0].forEach((event: MidiEvent & { meta?: boolean; }) => {\n\t\t\t\tfirstTrackCurrentTicks += event.deltaTime;\n\n\t\t\t\tif (event.meta) {\n\t\t\t\t\tif (event.type === \"trackName\") {\n\t\t\t\t\t\tthis.name = event.text;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tevent.type === \"text\" ||\n\t\t\t\t\t\tevent.type === \"cuePoint\" ||\n\t\t\t\t\t\tevent.type === \"marker\" ||\n\t\t\t\t\t\tevent.type === \"lyrics\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.meta.push({\n\t\t\t\t\t\t\ttext: event.text,\n\t\t\t\t\t\t\tticks: firstTrackCurrentTicks,\n\t\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.update();\n\t\t}\n\t}\n\n\t/**\n\t * This must be invoked after any changes are made to the tempo array\n\t * or the timeSignature array for the updated values to be reflected.\n\t */\n\tupdate(): void {\n\t\tlet currentTime = 0;\n\t\tlet lastEventBeats = 0;\n\n\t\t// Make sure it's sorted;\n\t\tthis.tempos.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.tempos.forEach((event, index) => {\n\t\t\tconst lastBPM =\n\t\t\t\tindex > 0 ? this.tempos[index - 1].bpm : this.tempos[0].bpm;\n\t\t\tconst beats = event.ticks / this.ppq - lastEventBeats;\n\t\t\tconst elapsedSeconds = (60 / lastBPM) * beats;\n\n\t\t\tevent.time = elapsedSeconds + currentTime;\n\t\t\tcurrentTime = event.time;\n\t\t\tlastEventBeats += beats;\n\t\t});\n\n\t\tthis.timeSignatures.sort((a, b) => a.ticks - b.ticks);\n\t\tthis.timeSignatures.forEach((event, index) => {\n\t\t\tconst lastEvent =\n\t\t\t\tindex > 0\n\t\t\t\t\t? this.timeSignatures[index - 1]\n\t\t\t\t\t: this.timeSignatures[0];\n\n\t\t\tconst elapsedBeats = (event.ticks - lastEvent.ticks) / this.ppq;\n\t\t\tconst elapsedMeasures =\n\t\t\t\telapsedBeats /\n\t\t\t\tlastEvent.timeSignature[0] /\n\t\t\t\t(lastEvent.timeSignature[1] / 4);\n\n\t\t\tlastEvent.measures = lastEvent.measures || 0;\n\t\t\tevent.measures = elapsedMeasures + lastEvent.measures;\n\t\t});\n\t}\n\n\t/**\n\t * Convert ticks into seconds based on the tempo changes.\n\t */\n\tticksToSeconds(ticks: number): number {\n\t\t// Find the relevant position.\n\t\tconst index = search(this.tempos, ticks);\n\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedBeats = (ticks - tempo.ticks) / this.ppq;\n\n\t\t\treturn tempoTime + (60 / tempo.bpm) * elapsedBeats;\n\t\t} else {\n\t\t\t// Assume 120.\n\t\t\tconst beats = ticks / this.ppq;\n\t\t\treturn (60 / 120) * beats;\n\t\t}\n\t}\n\n\t/**\n\t * Convert ticks into measures based off of the time signatures.\n\t */\n\tticksToMeasures(ticks: number): number {\n\t\tconst index = search(this.timeSignatures, ticks);\n\n\t\tif (index !== -1) {\n\t\t\tconst timeSigEvent = this.timeSignatures[index];\n\t\t\tconst elapsedBeats = (ticks - timeSigEvent.ticks) / this.ppq;\n\n\t\t\treturn (\n\t\t\t\ttimeSigEvent.measures +\n\t\t\t\telapsedBeats /\n\t\t\t\t\t(timeSigEvent.timeSignature[0] /\n\t\t\t\t\t\ttimeSigEvent.timeSignature[1]) /\n\t\t\t\t\t4\n\t\t\t);\n\t\t} else {\n\t\t\treturn ticks / this.ppq / 4;\n\t\t}\n\t}\n\n\t/**\n\t * The number of ticks per quarter note.\n\t */\n\tget ppq(): number {\n\t\treturn privatePPQMap.get(this);\n\t}\n\n\t/**\n\t * Convert seconds to ticks based on the tempo events.\n\t */\n\tsecondsToTicks(seconds: number): number {\n\t\t// Find the relevant position.\n\t\tconst index = search(this.tempos, seconds, \"time\");\n\n\t\tif (index !== -1) {\n\t\t\tconst tempo = this.tempos[index];\n\t\t\tconst tempoTime = tempo.time;\n\t\t\tconst elapsedTime = seconds - tempoTime;\n\t\t\tconst elapsedBeats = elapsedTime / (60 / tempo.bpm);\n\n\t\t\treturn Math.round(tempo.ticks + elapsedBeats * this.ppq);\n\t\t} else {\n\t\t\t// Assume 120.\n\t\t\tconst beats = seconds / (60 / 120);\n\t\t\treturn Math.round(beats * this.ppq);\n\t\t}\n\t}\n\n\t/**\n\t * Convert the header into an object.\n\t */\n\ttoJSON(): HeaderJSON {\n\t\treturn {\n\t\t\tkeySignatures: this.keySignatures,\n\t\t\tmeta: this.meta,\n\t\t\tname: this.name,\n\t\t\tppq: this.ppq,\n\t\t\ttempos: this.tempos.map((t) => {\n\t\t\t\treturn {\n\t\t\t\t\tbpm: t.bpm,\n\t\t\t\t\tticks: t.ticks,\n\t\t\t\t};\n\t\t\t}),\n\t\t\ttimeSignatures: this.timeSignatures,\n\t\t};\n\t}\n\n\t/**\n\t * Parse a header json object.\n\t */\n\tfromJSON(json: HeaderJSON): void {\n\t\tthis.name = json.name;\n\t\t\n\t\t// Clone all the attributes.\n\t\tthis.tempos = json.tempos.map((t) => Object.assign({}, t));\n\t\tthis.timeSignatures = json.timeSignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.keySignatures = json.keySignatures.map((t) =>\n\t\t\tObject.assign({}, t)\n\t\t);\n\t\tthis.meta = json.meta.map((t) => Object.assign({}, t));\n\n\t\tprivatePPQMap.set(this, json.ppq);\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Update the tempo of the midi to a single tempo. Will remove and replace\n\t * any other tempos currently set and update all of the event timing.\n\t * @param bpm The tempo in beats per second.\n\t */\n\tsetTempo(bpm: number): void {\n\t\tthis.tempos = [\n\t\t\t{\n\t\t\t\tbpm,\n\t\t\t\tticks: 0,\n\t\t\t},\n\t\t];\n\t\tthis.update();\n\t}\n}\n\nexport interface HeaderJSON {\n\tname: string;\n\tppq: number;\n\tmeta: MetaEvent[];\n\ttempos: TempoEvent[];\n\ttimeSignatures: TimeSignatureEvent[];\n\tkeySignatures: KeySignatureEvent[];\n}\n","import type {\n\tMidiEvent,\n\tMidiProgramChangeEvent\n} from \"midi-file\";\n\nimport { DrumKitByPatchID, instrumentByPatchID, InstrumentFamilyByID } from \"./InstrumentMaps\";\nimport { Track } from \"./Track\";\n\n/**\n * @hidden\n */\nconst privateTrackMap = new WeakMap<Instrument, Track>();\n\n/**\n * Describes the MIDI instrument of a track.\n */\nexport class Instrument {\n\n\t/**\n\t * The instrument number. Defaults to 0.\n\t */\n\tnumber = 0;\n\n\t/**\n\t * @param trackData\n\t * @param track \n\t */\n\tconstructor(trackData: MidiEvent[], track: Track) {\n\t\tprivateTrackMap.set(this, track);\n\t\tthis.number = 0;\n\n\t\tif (trackData) {\n\t\t\tconst programChange = trackData.find(\n\t\t\t\te => e.type === \"programChange\"\n\t\t\t) as MidiProgramChangeEvent;\n\n\t\t\t// Set 'number' from 'programNumber' if exists.\n\t\t\tif (programChange) {\n\t\t\t\tthis.number = programChange.programNumber;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The common name of the instrument.\n\t */\n\tget name(): string {\n\t\tif (this.percussion) {\n\t\t\treturn DrumKitByPatchID[this.number];\n\t\t} else {\n\t\t\treturn instrumentByPatchID[this.number];\n\t\t}\n\t}\n\n\tset name(n: string) {\n\t\tconst patchNumber = instrumentByPatchID.indexOf(n);\n\t\tif (patchNumber !== -1) {\n\t\t\tthis.number = patchNumber;\n\t\t}\n\t}\n\n\t/**\n\t * The instrument family, e.g. \"piano\".\n\t */\n\tget family(): string {\n\t\tif (this.percussion) {\n\t\t\treturn \"drums\";\n\t\t} else {\n\t\t\treturn InstrumentFamilyByID[Math.floor(this.number / 8)];\n\t\t}\n\t}\n\n\t/**\n\t * If the instrument is a percussion instrument.\n\t */\n\tget percussion(): boolean {\n\t\tconst track = privateTrackMap.get(this);\n\t\treturn track.channel === 9;\n\t}\n\n\t/**\n\t * Convert it to JSON form.\n\t */\n\ttoJSON(): InstrumentJSON {\n\t\treturn {\n\t\t\tfamily: this.family,\n\t\t\tnumber: this.number,\n\t\t\tname: this.name\n\t\t};\n\t}\n\n\t/**\n\t * Convert from JSON form.\n\t */\n\tfromJSON(json: InstrumentJSON): void {\n\t\tthis.number = json.number;\n\t}\n}\n\nexport interface InstrumentJSON {\n\tfamily: string;\n\tnumber: number;\n\tname: string;\n}\n","export const instrumentByPatchID = [\n\t\"acoustic grand piano\",\n\t\"bright acoustic piano\",\n\t\"electric grand piano\",\n\t\"honky-tonk piano\",\n\t\"electric piano 1\",\n\t\"electric piano 2\",\n\t\"harpsichord\",\n\t\"clavi\",\n\t\"celesta\",\n\t\"glockenspiel\",\n\t\"music box\",\n\t\"vibraphone\",\n\t\"marimba\",\n\t\"xylophone\",\n\t\"tubular bells\",\n\t\"dulcimer\",\n\t\"drawbar organ\",\n\t\"percussive organ\",\n\t\"rock organ\",\n\t\"church organ\",\n\t\"reed organ\",\n\t\"accordion\",\n\t\"harmonica\",\n\t\"tango accordion\",\n\t\"acoustic guitar (nylon)\",\n\t\"acoustic guitar (steel)\",\n\t\"electric guitar (jazz)\",\n\t\"electric guitar (clean)\",\n\t\"electric guitar (muted)\",\n\t\"overdriven guitar\",\n\t\"distortion guitar\",\n\t\"guitar harmonics\",\n\t\"acoustic bass\",\n\t\"electric bass (finger)\",\n\t\"electric bass (pick)\",\n\t\"fretless bass\",\n\t\"slap bass 1\",\n\t\"slap bass 2\",\n\t\"synth bass 1\",\n\t\"synth bass 2\",\n\t\"violin\",\n\t\"viola\",\n\t\"cello\",\n\t\"contrabass\",\n\t\"tremolo strings\",\n\t\"pizzicato strings\",\n\t\"orchestral harp\",\n\t\"timpani\",\n\t\"string ensemble 1\",\n\t\"string ensemble 2\",\n\t\"synthstrings 1\",\n\t\"synthstrings 2\",\n\t\"choir aahs\",\n\t\"voice oohs\",\n\t\"synth voice\",\n\t\"orchestra hit\",\n\t\"trumpet\",\n\t\"trombone\",\n\t\"tuba\",\n\t\"muted trumpet\",\n\t\"french horn\",\n\t\"brass section\",\n\t\"synthbrass 1\",\n\t\"synthbrass 2\",\n\t\"soprano sax\",\n\t\"alto sax\",\n\t\"tenor sax\",\n\t\"baritone sax\",\n\t\"oboe\",\n\t\"english horn\",\n\t\"bassoon\",\n\t\"clarinet\",\n\t\"piccolo\",\n\t\"flute\",\n\t\"recorder\",\n\t\"pan flute\",\n\t\"blown bottle\",\n\t\"shakuhachi\",\n\t\"whistle\",\n\t\"ocarina\",\n\t\"lead 1 (square)\",\n\t\"lead 2 (sawtooth)\",\n\t\"lead 3 (calliope)\",\n\t\"lead 4 (chiff)\",\n\t\"lead 5 (charang)\",\n\t\"lead 6 (voice)\",\n\t\"lead 7 (fifths)\",\n\t\"lead 8 (bass + lead)\",\n\t\"pad 1 (new age)\",\n\t\"pad 2 (warm)\",\n\t\"pad 3 (polysynth)\",\n\t\"pad 4 (choir)\",\n\t\"pad 5 (bowed)\",\n\t\"pad 6 (metallic)\",\n\t\"pad 7 (halo)\",\n\t\"pad 8 (sweep)\",\n\t\"fx 1 (rain)\",\n\t\"fx 2 (soundtrack)\",\n\t\"fx 3 (crystal)\",\n\t\"fx 4 (atmosphere)\",\n\t\"fx 5 (brightness)\",\n\t\"fx 6 (goblins)\",\n\t\"fx 7 (echoes)\",\n\t\"fx 8 (sci-fi)\",\n\t\"sitar\",\n\t\"banjo\",\n\t\"shamisen\",\n\t\"koto\",\n\t\"kalimba\",\n\t\"bag pipe\",\n\t\"fiddle\",\n\t\"shanai\",\n\t\"tinkle bell\",\n\t\"agogo\",\n\t\"steel drums\",\n\t\"woodblock\",\n\t\"taiko drum\",\n\t\"melodic tom\",\n\t\"synth drum\",\n\t\"reverse cymbal\",\n\t\"guitar fret noise\",\n\t\"breath noise\",\n\t\"seashore\",\n\t\"bird tweet\",\n\t\"telephone ring\",\n\t\"helicopter\",\n\t\"applause\",\n\t\"gunshot\",\n];\n\nexport const InstrumentFamilyByID = [\n\t\"piano\",\n\t\"chromatic percussion\",\n\t\"organ\",\n\t\"guitar\",\n\t\"bass\",\n\t\"strings\",\n\t\"ensemble\",\n\t\"brass\",\n\t\"reed\",\n\t\"pipe\",\n\t\"synth lead\",\n\t\"synth pad\",\n\t\"synth effects\",\n\t\"world\",\n\t\"percussive\",\n\t\"sound effects\",\n];\n\nexport const DrumKitByPatchID = {\n\t0: \"standard kit\",\n\t8: \"room kit\",\n\t16: \"power kit\",\n\t24: \"electronic kit\",\n\t25: \"tr-808 kit\",\n\t32: \"jazz kit\",\n\t40: \"brush kit\",\n\t48: \"orchestra kit\",\n\t56: \"sound fx kit\",\n};\n","import type {\n\tMidiData,\n\tMidiEvent\n} from \"midi-file\";\n\nimport { parseMidi } from \"midi-file\";\n\nimport { Header, HeaderJSON } from \"./Header\";\nimport { Track, TrackJSON } from \"./Track\";\nimport { encode } from \"./Encode\";\n\n/**\n * The main midi parsing class.\n */\nexport class Midi {\n\n\t/**\n\t * Download and parse the MIDI file. Returns a promise\n\t * which resolves to the generated MIDI file.\n\t * @param url The URL to fetch.\n\t */\n\tstatic async fromUrl(url: string): Promise<Midi> {\n\t\tconst response = await fetch(url);\n\t\tif (response.ok) {\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\treturn new Midi(arrayBuffer);\n\t\t} else {\n\t\t\tthrow new Error(`Could not load '${url}'`);\n\t\t}\n\t}\n\n\t/**\n\t * The header information, includes things like tempo and meta events.\n\t */\n\theader: Header;\n\n\t/**\n\t * The midi tracks.\n\t */\n\ttracks: Track[];\n\n\t/**\n\t * Parse the midi data\n\t */\n\tconstructor(midiArray?: (ArrayLike<number> | ArrayBuffer)) {\n\t\t// Parse the MIDI data if there is any.\n\t\tlet midiData: (MidiData | null) = null;\n\t\tif (midiArray) {\n\t\t\t// Transform midiArray to ArrayLike<number>\n\t\t\t// only if it's an ArrayBuffer.\n\t\t\tconst midiArrayLike: ArrayLike<number> = midiArray instanceof ArrayBuffer\n\t\t\t\t? new Uint8Array(midiArray)\n\t\t\t\t: midiArray;\n\n\t\t\t// Parse MIDI data.\n\t\t\tmidiData = parseMidi(midiArrayLike);\n\n\t\t\t// Add the absolute times to each of the tracks.\n\t\t\tmidiData.tracks.forEach(track => {\n\t\t\t\tlet currentTicks = 0;\n\n\t\t\t\ttrack.forEach((event: MidiEvent & { absoluteTime: number; }) => {\n\t\t\t\t\tcurrentTicks += event.deltaTime;\n\t\t\t\t\tevent.absoluteTime = currentTicks;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Ensure at most one instrument per track.\n\t\t\tmidiData.tracks = splitTracks(midiData.tracks);\n\t\t}\n\n\t\tthis.header = new Header(midiData);\n\t\tthis.tracks = [];\n\n\t\t// Parse MIDI data.\n\t\tif (midiArray) {\n\t\t\t// Format 0, everything is on the same track.\n\t\t\tthis.tracks = midiData.tracks.map(trackData => new Track(trackData, this.header));\n\n\t\t\t// If it's format 1 and there are no notes on the first track, remove it.\n\t\t\tif (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n\t\t\t\tthis.tracks.shift();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The name of the midi file, taken from the first track.\n\t */\n\tget name(): string {\n\t\treturn this.header.name;\n\t}\n\n\tset name(n) {\n\t\tthis.header.name = n;\n\t}\n\n\t/**\n\t * The total length of the file in seconds.\n\t */\n\tget duration(): number {\n\t\t// Get the max of the last note of all the tracks.\n\t\tconst durations = this.tracks.map(t => t.duration);\n\t\treturn Math.max(...durations);\n\t}\n\n\t/**\n\t * The total length of the file in ticks.\n\t */\n\tget durationTicks(): number {\n\t\t// Get the max of the last note of all the tracks.\n\t\tconst durationTicks = this.tracks.map(t => t.durationTicks);\n\t\treturn Math.max(...durationTicks);\n\t}\n\n\t/**\n\t * Add a track to the MIDI file.\n\t */\n\taddTrack(): Track {\n\t\tconst track = new Track(undefined, this.header);\n\t\tthis.tracks.push(track);\n\n\t\treturn track;\n\t}\n\n\t/**\n\t * Encode the MIDI as a Uint8Array.\n\t */\n\ttoArray(): Uint8Array {\n\t\treturn encode(this);\n\t}\n\n\t/**\n\t * Convert the MIDI object to JSON.\n\t */\n\ttoJSON(): MidiJSON {\n\t\treturn {\n\t\t\theader: this.header.toJSON(),\n\t\t\ttracks: this.tracks.map(track => track.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Parse a JSON representation of the object. Will overwrite the current\n\t * tracks and header.\n\t */\n\tfromJSON(json: MidiJSON): void {\n\t\tthis.header = new Header();\n\t\tthis.header.fromJSON(json.header);\n\t\tthis.tracks = json.tracks.map(trackJSON => {\n\t\t\tconst track = new Track(undefined, this.header);\n\t\t\ttrack.fromJSON(trackJSON);\n\n\t\t\treturn track;\n\t\t});\n\t}\n\n\t/**\n\t * Clone the entire object MIDI object.\n\t */\n\tclone(): Midi {\n\t\tconst midi = new Midi();\n\t\tmidi.fromJSON(this.toJSON());\n\n\t\treturn midi;\n\t}\n}\n\n/**\n * The MIDI data in JSON format.\n */\nexport interface MidiJSON {\n\theader: HeaderJSON;\n\ttracks: TrackJSON[];\n}\n\nexport { TrackJSON, Track } from \"./Track\";\nexport { HeaderJSON, Header } from \"./Header\";\n\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\nfunction splitTracks(tracks: Array<MidiEvent[]>): Array<MidiEvent[]> {\n\tconst newTracks = [];\n\n\tfor (let i = 0; i < tracks.length; i++) {\n\t\tconst defaultTrack = newTracks.length;\n\t\t// a map from [program, channel] tuples to new track numbers\n\t\tconst trackMap = new Map<string, number>();\n\t\t// a map from channel numbers to current program numbers\n\t\tconst currentProgram = Array(16).fill(0) as Array<number>;\n\n\t\tfor (const event of tracks[i]) {\n\t\t\tlet targetTrack = defaultTrack;\n\n\t\t\t// If the event has a channel, we need to find that channel's current\n\t\t\t// program number and the appropriate track for this [program, channel]\n\t\t\t// pair.\n\t\t\tconst channel = (event as (MidiEvent & { channel?: number })).channel;\n\t\t\tif (channel !== undefined) {\n\t\t\t\tif (event.type === \"programChange\") {\n\t\t\t\t\tcurrentProgram[channel] = event.programNumber;\n\t\t\t\t}\n\n\t\t\t\tconst program = currentProgram[channel];\n\t\t\t\tconst trackKey = `${program} ${channel}`;\n\t\t\t\t\n\t\t\t\tif (trackMap.has(trackKey)) {\n\t\t\t\t\ttargetTrack = trackMap.get(trackKey);\n\t\t\t\t} else {\n\t\t\t\t\ttargetTrack = defaultTrack + trackMap.size;\n\t\t\t\t\ttrackMap.set(trackKey, targetTrack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!newTracks[targetTrack]) {\n\t\t\t\tnewTracks.push([]);\n\t\t\t}\n\n\t\t\tnewTracks[targetTrack].push(event);\n\t\t}\n\t}\n\n\treturn newTracks;\n}\n","import { Header } from \"./Header\";\n\n/**\n * Convert a MIDI note into a pitch.\n */\nfunction midiToPitch(midi: number): string {\n\tconst octave = Math.floor(midi / 12) - 1;\n\treturn midiToPitchClass(midi) + octave.toString();\n}\n\n/**\n * Convert a MIDI note to a pitch class (just the pitch no octave).\n */\nfunction midiToPitchClass(midi: number): string {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tconst note = midi % 12;\n\treturn scaleIndexToNote[note];\n}\n\n/**\n * Convert a pitch class to a MIDI note.\n */\nfunction pitchClassToMidi(pitch: string): number {\n\tconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\treturn scaleIndexToNote.indexOf(pitch);\n}\n\n/**\n * Convert a pitch to a MIDI number.\n */\n// tslint:disable-next-line: only-arrow-functions typedef\nconst pitchToMidi: (note: string) => number = (function() {\n\tconst regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tconst noteToScaleIndex = {\n\t\t// tslint:disable-next-line: object-literal-sort-keys\n\t\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\t\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\t\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\t\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\t\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\t\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\t\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n\t};\n\n\treturn (note) => {\n\t\tconst split = regexp.exec(note);\n\t\tconst pitch = split[1];\n\t\tconst octave = split[2];\n\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave, 10) + 1) * 12;\n\t};\n}());\n\nconst privateHeaderMap = new WeakMap<Note, Header>();\n\n/**\n * A Note consists of a `noteOn` and `noteOff` event.\n */\nexport class Note implements NoteInterface {\n\n\t/**\n\t * The notes MIDI value.\n\t */\n\tmidi: number;\n\n\t/**\n\t * The normalized velocity (0-1).\n\t */\n\tvelocity: number;\n\n\t/**\n\t * The velocity of the note off.\n\t */\n\tnoteOffVelocity: number;\n\n\t/**\n\t * The start time in ticks.\n\t */\n\tticks: number;\n\n\t/**\n\t * The duration in ticks.\n\t */\n\tdurationTicks: number;\n\n\tconstructor(noteOn: NoteOnEvent, noteOff: NoteOffEvent, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.midi = noteOn.midi;\n\n\t\tthis.velocity = noteOn.velocity;\n\n\t\tthis.noteOffVelocity = noteOff.velocity;\n\n\t\tthis.ticks = noteOn.ticks;\n\n\t\tthis.durationTicks = noteOff.ticks - noteOn.ticks;\n\t}\n\n\t/**\n\t * The note name and octave in scientific pitch notation, e.g. \"C4\".\n\t */\n\tget name(): string {\n\t\treturn midiToPitch(this.midi);\n\t}\n\n\tset name(n: string) {\n\t\tthis.midi = pitchToMidi(n);\n\t}\n\n\t/**\n\t * The notes octave number.\n\t */\n\tget octave(): number {\n\t\treturn Math.floor(this.midi / 12) - 1;\n\t}\n\n\tset octave(o: number) {\n\t\tconst diff = o - this.octave;\n\t\tthis.midi += diff * 12;\n\t}\n\n\t/**\n\t * The pitch class name. e.g. \"A\".\n\t */\n\tget pitch(): string {\n\t\treturn midiToPitchClass(this.midi);\n\t}\n\n\tset pitch(p: string) {\n\t\tthis.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n\t}\n\n\t/**\n\t * The duration of the segment in seconds.\n\t */\n\tget duration(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n\t}\n\n\tset duration(d: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst noteEndTicks = header.secondsToTicks(this.time + d);\n\t\tthis.durationTicks = noteEndTicks - this.ticks;\n\t}\n\n\t/**\n\t * The time of the event in seconds.\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\t/**\n\t * The number of measures (and partial measures) to this beat.\n\t * Takes into account time signature changes.\n\t * @readonly\n\t */\n\tget bars(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToMeasures(this.ticks);\n\t}\n\n\ttoJSON(): NoteJSON {\n\t\treturn {\n\t\t\tduration: this.duration,\n\t\t\tdurationTicks: this.durationTicks,\n\t\t\tmidi: this.midi,\n\t\t\tname: this.name,\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvelocity: this.velocity,\n\t\t};\n\t}\n}\n\nexport interface NoteJSON {\n\ttime: number;\n\tmidi: number;\n\tname: string;\n\tvelocity: number;\n\tduration: number;\n\tticks: number;\n\tdurationTicks: number;\n}\n\nexport interface NoteOnEvent {\n\tticks: number;\n\tvelocity: number;\n\tmidi: number;\n}\n\nexport interface NoteOffEvent {\n\tticks: number;\n\tvelocity: number;\n}\n\nexport interface NoteInterface {\n\ttime: number;\n\tticks: number;\n\tduration: number;\n\tdurationTicks: number;\n\tmidi: number;\n\tpitch: string;\n\toctave: number;\n\tname: string;\n\tnoteOffVelocity: number;\n\tvelocity: number;\n}\n\ntype PitchDescription = {\n\tname: string;\n} | {\n\tpitch: string;\n\toctave: number;\n} | {\n\tmidi: number;\n}\n\ntype VelocityDescription = {\n\tvelocity?: number;\n\tnoteOffVelocity?: number;\n}\n\ntype TimeDescription = {\n\ttime: number;\n\tduration?: number;\n} | {\n\tticks: number;\n\tdurationTicks?: number;\n}\n\n/**\n * @hidden\n */\nexport type NoteConstructorInterface = PitchDescription & VelocityDescription & TimeDescription\n","import { Header } from \"./Header\";\nimport { MidiPitchBendEvent } from \"midi-file\";\n\nconst privateHeaderMap = new WeakMap<PitchBend, Header>();\n\n/**\n * Represents a pitch bend event.\n */\nexport class PitchBend implements PitchBendInterface {\n\n\t/**\n\t * The pitch value from...\n\t */\n\tvalue: number;\n\n\t/**\n\t * The tick time of the event.\n\t */\n\tticks: number;\n\n\t/**\n\t * @param event\n\t * @param header\n\t */\n\tconstructor(event: Partial<MidiPitchBendEvent & { absoluteTime: number; }>, header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tthis.ticks = event.absoluteTime;\n\t\tthis.value = event.value;\n\t}\n\n\t/**\n\t * The time of the event in seconds\n\t */\n\tget time(): number {\n\t\tconst header = privateHeaderMap.get(this);\n\t\treturn header.ticksToSeconds(this.ticks);\n\t}\n\n\tset time(t: number) {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tthis.ticks = header.secondsToTicks(t);\n\t}\n\n\ttoJSON(): PitchBendJSON {\n\t\treturn {\n\t\t\tticks: this.ticks,\n\t\t\ttime: this.time,\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n}\n\nexport interface PitchBendJSON {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n\nexport interface PitchBendInterface {\n\tticks: number;\n\ttime: number;\n\tvalue: number;\n}\n","import type {\n\tMidiControllerEvent,\n\tMidiEndOfTrackEvent,\n\tMidiEvent,\n\tMidiNoteOffEvent, MidiNoteOnEvent,\n\tMidiPitchBendEvent, MidiTrackNameEvent\n} from \"midi-file\";\n\n// Used to add `absoluteTime` property to 'MidiEvent's.\ntype WithAbsoluteTime = { absoluteTime: number; };\n\nimport { insert } from \"./BinarySearch\";\nimport { ControlChange, ControlChangeInterface } from \"./ControlChange\";\nimport { ControlChangesJSON, createControlChanges } from \"./ControlChanges\";\nimport { PitchBend, PitchBendInterface, PitchBendJSON } from \"./PitchBend\";\n\nimport { Header } from \"./Header\";\nimport { Instrument, InstrumentJSON } from \"./Instrument\";\nimport { Note, NoteConstructorInterface, NoteJSON } from \"./Note\";\n\nconst privateHeaderMap = new WeakMap<Track, Header>();\n\n/**\n * A Track is a collection of 'notes' and 'controlChanges'.\n */\nexport class Track {\n\t/**\n\t * The name of the track.\n\t */\n\tname = \"\";\n\n\t/**\n\t * The instrument associated with the track.\n\t */\n\tinstrument: Instrument;\n\n\t/**\n\t * The track's note events.\n\t */\n\tnotes: Note[] = [];\n\n\t/**\n\t * The channel number of the track. Applies this channel\n\t * to all events associated with the channel.\n\t */\n\tchannel: number;\n\n\t/**\n\t * The control change events.\n\t */\n\tcontrolChanges = createControlChanges();\n\n\t/**\n\t * The end of track event (if it exists) in ticks.\n\t */\n\tendOfTrackTicks?: number;\n\n\t/**\n\t * The pitch bend events.\n\t */\n\tpitchBends: PitchBend[] = [];\n\n\tconstructor(trackData: MidiEvent[], header: Header) {\n\t\tprivateHeaderMap.set(this, header);\n\n\t\tif (trackData) {\n\t\t\t// Get the name of the track.\n\t\t\tconst nameEvent = trackData.find(\n\t\t\t\t(e) => e.type === \"trackName\"\n\t\t\t) as MidiTrackNameEvent;\n\n\t\t\t// Set empty name if 'trackName' event isn't found.\n\t\t\tthis.name = nameEvent ? nameEvent.text : \"\";\n\t\t}\n\n\t\tthis.instrument = new Instrument(trackData, this);\n\n\t\t// Defaults to 0.\n\t\tthis.channel = 0;\n\n\t\tif (trackData) {\n\t\t\tconst noteOns = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOn\"\n\t\t\t) as (MidiNoteOnEvent & WithAbsoluteTime)[];\n\n\t\t\tconst noteOffs = trackData.filter(\n\t\t\t\t(event) => event.type === \"noteOff\"\n\t\t\t) as (MidiNoteOffEvent & WithAbsoluteTime)[];\n\n\t\t\twhile (noteOns.length) {\n\t\t\t\tconst currentNote = noteOns.shift();\n\n\t\t\t\t// Set the channel based on the note.\n\t\t\t\tthis.channel = currentNote.channel;\n\n\t\t\t\t// Find the corresponding note off.\n\t\t\t\tconst offIndex = noteOffs.findIndex(\n\t\t\t\t\t(note) =>\n\t\t\t\t\t\tnote.noteNumber === currentNote.noteNumber &&\n\t\t\t\t\t\tnote.absoluteTime >= currentNote.absoluteTime\n\t\t\t\t);\n\n\t\t\t\tif (offIndex !== -1) {\n\t\t\t\t\t// Once it's got the note off, add it.\n\t\t\t\t\tconst noteOff = noteOffs.splice(offIndex, 1)[0];\n\n\t\t\t\t\tthis.addNote({\n\t\t\t\t\t\tdurationTicks:\n\t\t\t\t\t\t\tnoteOff.absoluteTime - currentNote.absoluteTime,\n\t\t\t\t\t\tmidi: currentNote.noteNumber,\n\t\t\t\t\t\tnoteOffVelocity: noteOff.velocity / 127,\n\t\t\t\t\t\tticks: currentNote.absoluteTime,\n\t\t\t\t\t\tvelocity: currentNote.velocity / 127,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst controlChanges = trackData.filter(\n\t\t\t\t(event) => event.type === \"controller\"\n\t\t\t) as (MidiControllerEvent & WithAbsoluteTime)[];\n\t\t\tcontrolChanges.forEach((event) => {\n\t\t\t\tthis.addCC({\n\t\t\t\t\tnumber: event.controllerType,\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\tvalue: event.value / 127,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst pitchBends = trackData.filter(\n\t\t\t\t(event) => event.type === \"pitchBend\"\n\t\t\t) as (MidiPitchBendEvent & WithAbsoluteTime)[];\n\t\t\tpitchBends.forEach((event) => {\n\t\t\t\tthis.addPitchBend({\n\t\t\t\t\tticks: event.absoluteTime,\n\t\t\t\t\t// Scale the value between -2^13 to 2^13 to -2 to 2.\n\t\t\t\t\tvalue: event.value / Math.pow(2, 13),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst endOfTrackEvent:\n\t\t\t| (MidiEndOfTrackEvent & WithAbsoluteTime)\n\t\t\t| undefined = trackData.find(\n\t\t\t\t(event): event is (MidiEndOfTrackEvent & WithAbsoluteTime) =>\n\t\t\t\t\tevent.type === \"endOfTrack\"\n\t\t\t);\n\n\t\t\tthis.endOfTrackTicks =\n\t\t\t\tendOfTrackEvent !== undefined\n\t\t\t\t\t? endOfTrackEvent.absoluteTime\n\t\t\t\t\t: undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Add a note to the notes array.\n\t * @param props The note properties to add.\n\t */\n\taddNote(props: NoteConstructorInterface): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst note = new Note(\n\t\t\t{\n\t\t\t\tmidi: 0,\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 1,\n\t\t\t},\n\t\t\t{\n\t\t\t\tticks: 0,\n\t\t\t\tvelocity: 0,\n\t\t\t},\n\t\t\theader\n\t\t);\n\n\t\tObject.assign(note, props);\n\t\tinsert(this.notes, note, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track.\n\t * @param props\n\t */\n\taddCC(\n\t\tprops:\n\t\t| Omit<ControlChangeInterface, \"ticks\">\n\t\t| Omit<ControlChangeInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst cc = new ControlChange(\n\t\t\t{\n\t\t\t\tcontrollerType: props.number,\n\t\t\t},\n\t\t\theader\n\t\t);\n\t\tdelete props.number;\n\t\tObject.assign(cc, props);\n\t\tif (!Array.isArray(this.controlChanges[cc.number])) {\n\t\t\tthis.controlChanges[cc.number] = [];\n\t\t}\n\t\tinsert(this.controlChanges[cc.number], cc, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a control change to the track.\n\t */\n\taddPitchBend(\n\t\tprops:\n\t\t| Omit<PitchBendInterface, \"ticks\">\n\t\t| Omit<PitchBendInterface, \"time\">\n\t): this {\n\t\tconst header = privateHeaderMap.get(this);\n\t\tconst pb = new PitchBend({}, header);\n\t\tObject.assign(pb, props);\n\t\tinsert(this.pitchBends, pb, \"ticks\");\n\t\treturn this;\n\t}\n\n\t/**\n\t * The end time of the last event in the track.\n\t */\n\tget duration(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].time +\n\t\t\tthis.notes[this.notes.length - 1].duration;\n\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].time + this.notes[i].duration;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * The end time of the last event in the track in ticks.\n\t */\n\tget durationTicks(): number {\n\t\tif (!this.notes.length) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet maxDuration =\n\t\t\tthis.notes[this.notes.length - 1].ticks +\n\t\t\tthis.notes[this.notes.length - 1].durationTicks;\n\t\tfor (let i = 0; i < this.notes.length - 1; i++) {\n\t\t\tconst duration = this.notes[i].ticks + this.notes[i].durationTicks;\n\t\t\tif (maxDuration < duration) {\n\t\t\t\tmaxDuration = duration;\n\t\t\t}\n\t\t}\n\n\t\treturn maxDuration;\n\t}\n\n\t/**\n\t * Assign the JSON values to this track.\n\t */\n\tfromJSON(json: TrackJSON): void {\n\t\tthis.name = json.name;\n\t\tthis.channel = json.channel;\n\t\tthis.instrument = new Instrument(undefined, this);\n\t\tthis.instrument.fromJSON(json.instrument);\n\n\t\tif (json.endOfTrackTicks !== undefined) {\n\t\t\tthis.endOfTrackTicks = json.endOfTrackTicks;\n\t\t}\n\n\t\tfor (const number in json.controlChanges) {\n\t\t\tif (json.controlChanges[number]) {\n\t\t\t\tjson.controlChanges[number].forEach((cc) => {\n\t\t\t\t\tthis.addCC({\n\t\t\t\t\t\tnumber: cc.number,\n\t\t\t\t\t\tticks: cc.ticks,\n\t\t\t\t\t\tvalue: cc.value,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tjson.notes.forEach((n) => {\n\t\t\tthis.addNote({\n\t\t\t\tdurationTicks: n.durationTicks,\n\t\t\t\tmidi: n.midi,\n\t\t\t\tticks: n.ticks,\n\t\t\t\tvelocity: n.velocity,\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Convert the track into a JSON format.\n\t */\n\ttoJSON(): TrackJSON {\n\t\t// Convert all the CCs to JSON.\n\t\tconst controlChanges = {};\n\t\tfor (let i = 0; i < 127; i++) {\n\t\t\tif (this.controlChanges.hasOwnProperty(i)) {\n\t\t\t\tcontrolChanges[i] = this.controlChanges[i].map((c) =>\n\t\t\t\t\tc.toJSON()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst json: TrackJSON = {\n\t\t\tchannel: this.channel,\n\t\t\tcontrolChanges,\n\t\t\tpitchBends: this.pitchBends.map((pb) => pb.toJSON()),\n\t\t\tinstrument: this.instrument.toJSON(),\n\t\t\tname: this.name,\n\t\t\tnotes: this.notes.map((n) => n.toJSON()),\n\t\t};\n\n\t\tif (this.endOfTrackTicks !== undefined) {\n\t\t\tjson.endOfTrackTicks = this.endOfTrackTicks;\n\t\t}\n\n\t\treturn json;\n\t}\n}\n\nexport interface TrackJSON {\n\tname: string;\n\tnotes: NoteJSON[];\n\tchannel: number;\n\tinstrument: InstrumentJSON;\n\tcontrolChanges: ControlChangesJSON;\n\tpitchBends: PitchBendJSON[];\n\tendOfTrackTicks?: number;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(233);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","this","flatten","array","result","$flatten","length","value","Array","isArray","push","parseMidi","writeMidi","parseTrack","data","lastEventTypeByte","p","Parser","events","eof","event","readEvent","deltaTime","readVarInt","eventTypeByte","readUInt8","type","readBytes","meta","metatypeByte","number","readUInt16","text","readString","channel","port","microsecondsPerBeat","readUInt24","hourByte","frameRate","hour","min","sec","frame","subFrame","numerator","denominator","metronome","thirtyseconds","key","readInt8","scale","param1","running","eventType","noteNumber","velocity","byte9","amount","controllerType","programNumber","buffer","bufferLen","pos","prototype","u","readInt16","readInt24","readUInt32","len","bytes","slice","String","fromCharCode","apply","b","readChunk","id","headerChunk","header","format","numTracks","timeDivision","framesPerSecond","ticksPerFrame","ticksPerBeat","parseHeader","tracks","trackChunk","track","writeTrack","w","opts","t","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","Math","floor","log","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","call","str","codePointAt","reverse","h","writeHeader","search","prop","beginning","end","midPoint","nextEvent","index","splice","controlChangeNames","controlChangeIds","Object","keys","reduce","obj","privateHeaderMap","WeakMap","privateCCNumberMap","set","ticks","absoluteTime","get","ticksToSeconds","secondsToTicks","toJSON","time","ControlChange","Proxy","target","handler","hasOwnProperty","encodeControlChange","cc","encodeInstrument","instrument","midi","midiData","ppq","name","keySignatures","map","keySig","keyIndex","keySignatureKeys","indexOf","encodeKeySignature","e","textEvent","tempos","tempo","bpm","encodeTempo","timeSignatures","timeSig","timeSignature","encodeTimeSignature","notes","note","durationTicks","noteOffVelocity","encodeNote","encodeNotes","controlChanges","forEach","encodeControlChanges","pitchBends","pb","encodePitchBend","encodePitchBends","sort","lastTime","Uint8Array","privatePPQMap","update","currentTime","lastEventBeats","lastBPM","beats","elapsedSeconds","lastEvent","elapsedMeasures","measures","tempoTime","elapsedBeats","ticksToMeasures","timeSigEvent","seconds","round","fromJSON","json","assign","setTempo","Header","privateTrackMap","trackData","programChange","find","percussion","DrumKitByPatchID","instrumentByPatchID","n","patchNumber","InstrumentFamilyByID","family","Instrument","midiArray","midiArrayLike","ArrayBuffer","currentTicks","newTracks","defaultTrack","trackMap","Map","currentProgram","fill","targetTrack","undefined","program","trackKey","has","size","splitTracks","Track","duration","shift","fromUrl","url","fetch","response","ok","arrayBuffer","Midi","Error","durations","max","addTrack","toArray","encode","trackJSON","clone","midiToPitchClass","regexp","noteToScaleIndex","pitchToMidi","cbb","cb","c","cx","dbb","db","d","dx","ebb","eb","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","ax","bbb","bb","bx","split","exec","pitch","octave","toLowerCase","parseInt","noteOn","noteOff","toString","o","diff","noteEndTicks","Note","PitchBend","createControlChanges","nameEvent","noteOns","filter","noteOffs","currentNote","offIndex","findIndex","addNote","addCC","addPitchBend","pow","endOfTrackEvent","endOfTrackTicks","props","insert","maxDuration","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","r","Symbol","toStringTag"],"sourceRoot":""}